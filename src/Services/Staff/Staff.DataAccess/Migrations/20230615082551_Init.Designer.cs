// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Staff.DataAccess.Contexts;

#nullable disable

namespace Staff.DataAccess.Migrations
{
    [DbContext(typeof(StaffsDbContext))]
    [Migration("20230615082551_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Staff.DataAccess.Entities.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CountOfScores")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("715834a7-a01b-4e04-bc90-122b59c61132"),
                            Name = "Actor"
                        },
                        new
                        {
                            Id = new Guid("c20eb5a6-f202-4345-bbde-9520fae6ce44"),
                            Name = "Regisseur"
                        },
                        new
                        {
                            Id = new Guid("f6104cff-2c90-48bf-834a-f817273541bd"),
                            Name = "Producer"
                        },
                        new
                        {
                            Id = new Guid("f3fe6537-75e9-4e37-9cc8-7fb0d58c2931"),
                            Name = "Operator"
                        },
                        new
                        {
                            Id = new Guid("3890c596-cc11-4dd2-a020-80ec952b985e"),
                            Name = "Composer"
                        },
                        new
                        {
                            Id = new Guid("5065f5c7-c65e-449f-9bd3-7be5858a5933"),
                            Name = "Artist"
                        },
                        new
                        {
                            Id = new Guid("4e24b12c-26e9-4866-9bc9-edcb88f1364a"),
                            Name = "Montage"
                        });
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.StaffPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.StaffPersonPosition", b =>
                {
                    b.Property<Guid>("StaffPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffPersonId", "PositionId", "FilmId");

                    b.HasIndex("FilmId");

                    b.HasIndex("PositionId");

                    b.ToTable("StaffPersonPositions");
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.StaffPersonPosition", b =>
                {
                    b.HasOne("Staff.DataAccess.Entities.Film", "Film")
                        .WithMany("StaffPersonPositions")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Staff.DataAccess.Entities.Position", "Position")
                        .WithMany("StaffPersonPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Staff.DataAccess.Entities.StaffPerson", "StaffPerson")
                        .WithMany("StaffPersonPositions")
                        .HasForeignKey("StaffPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Position");

                    b.Navigation("StaffPerson");
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.Film", b =>
                {
                    b.Navigation("StaffPersonPositions");
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.Position", b =>
                {
                    b.Navigation("StaffPersonPositions");
                });

            modelBuilder.Entity("Staff.DataAccess.Entities.StaffPerson", b =>
                {
                    b.Navigation("StaffPersonPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
