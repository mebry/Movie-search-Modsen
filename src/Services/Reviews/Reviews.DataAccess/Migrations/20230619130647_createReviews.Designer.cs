// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reviews.DataAccess.Contexts;

#nullable disable

namespace Reviews.DataAccess.Migrations
{
    [DbContext(typeof(ReviewsDbContext))]
    [Migration("20230619130647_createReviews")]
    partial class createReviews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Reviews.DataAccess.Entities.Critic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Critics");
                });

            modelBuilder.Entity("Reviews.DataAccess.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CriticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TypeOfReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CriticId");

                    b.HasIndex("TypeOfReviewId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Reviews.DataAccess.Entities.TypeOfReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfReview");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9de81a67-83e0-4356-ae0f-b76e03962b00"),
                            Name = "Positive"
                        },
                        new
                        {
                            Id = new Guid("095492e4-3f57-432b-91e1-a632cc2a13f0"),
                            Name = "Negative"
                        },
                        new
                        {
                            Id = new Guid("10451ef2-59bd-4e80-a314-d34f679d2f0c"),
                            Name = "Neutral"
                        });
                });

            modelBuilder.Entity("Reviews.DataAccess.Entities.Review", b =>
                {
                    b.HasOne("Reviews.DataAccess.Entities.Critic", "Critic")
                        .WithMany()
                        .HasForeignKey("CriticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reviews.DataAccess.Entities.TypeOfReview", "TypeOfReview")
                        .WithMany("Reviews")
                        .HasForeignKey("TypeOfReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Critic");

                    b.Navigation("TypeOfReview");
                });

            modelBuilder.Entity("Reviews.DataAccess.Entities.TypeOfReview", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
